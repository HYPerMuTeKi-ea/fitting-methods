#线性回归
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X, y)
a = lin_reg.intercept_
b = lin_reg.coef_
a,b#回归系数和截距
#画图
plt.plot(X_new, y_predict, "r-", linewidth=2, label="Predictions")
plt.plot(X, y, "b.")
plt.xlabel("$x_1$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.legend(loc="upper left", fontsize=14)
plt.axis([0, 2, 0, 15])
plt.show()






#加权线性回归
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# 生成一些样本数据
np.random.seed(42)
X = np.random.rand(100, 1) * 10  # 特征数据，范围为[0, 10]
y = 2.5 * X + np.random.randn(100, 1) * 5  # 标签数据，带有一些噪声

# 设置样本权重（例如，较小的X值样本有较大的权重）
weights = np.where(X < 5, 2, 0.5).flatten()

# 创建并拟合加权线性回归模型
model = LinearRegression()
model.fit(X, y, sample_weight=weights)

# 打印模型的系数和截距
print(f"Coefficients: {model.coef_[0][0]:.2f}")
print(f"Intercept: {model.intercept_[0]:.2f}")

# 绘制数据点和拟合线
plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='skyblue', label='Data points', alpha=0.7)
plt.plot(X, model.predict(X), color='red', linewidth=2, label='Weighted Linear Regression Fit')
plt.title('Weighted Linear Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()







#泊松分布
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# 生成一些样本数据
np.random.seed(42)
X = np.random.rand(100, 1) * 10  # 特征数据，范围为[0, 10]
y = 2.5 * X + np.random.randn(100, 1) * 5  # 标签数据，带有一些噪声

# 设置样本权重（例如，较小的X值样本有较大的权重）
weights = np.where(X < 5, 2, 0.5).flatten()

# 创建并拟合加权线性回归模型
model = LinearRegression()
model.fit(X, y, sample_weight=weights)

# 打印模型的系数和截距
print(f"Coefficients: {model.coef_[0][0]:.2f}")
print(f"Intercept: {model.intercept_[0]:.2f}")

# 绘制数据点和拟合线
plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='skyblue', label='Data points', alpha=0.7)
plt.plot(X, model.predict(X), color='red', linewidth=2, label='Weighted Linear Regression Fit')
plt.title('Weighted Linear Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()
